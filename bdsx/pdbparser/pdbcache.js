"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PdbCache = void 0;
const path = require("path");
const fs = require("fs");
const core_1 = require("../core");
const dll_1 = require("../dll");
const dbghelp_1 = require("../dbghelp");
const cachepath = path.join(__dirname, 'pdbcachedata.bin');
const VERSION = 0;
function makePdbCache() {
    if (fs.existsSync(cachepath)) {
        const fd = fs.openSync(cachepath, 'r');
        const buffer = new Int32Array(1);
        fs.readSync(fd, buffer, 0, 4, null);
        if (buffer[0] === VERSION)
            return fd;
        fs.closeSync(fd);
    }
    let no = 0;
    const filtered = [];
    const fd = fs.openSync(cachepath, 'w');
    const old = core_1.pdb.setOptions(dbghelp_1.SYMOPT_PUBLICS_ONLY);
    core_1.pdb.getAllEx(symbols => {
        for (const info of symbols) {
            let item = info.name;
            no++;
            if (item.length > 2000) {
                console.log(`skipped ${no}, too long (deco_length == ${item.length})`);
                continue; // too long
            }
            if (item.startsWith('__imp_?')) { // ?
                item = item.substr(6);
            }
            item = core_1.pdb.undecorate(item, dbghelp_1.UNDNAME_COMPLETE);
            if (item.startsWith('?')) {
                console.log(`unresolved symbol: ${item}`);
                continue;
            }
            if (item.length > 4050) {
                console.log(`skipped ${no}, too long (undeo_length == ${item.length})`);
                continue; // too long
            }
            if (item.startsWith('__IMPORT_DESCRIPTOR_api-')) { // ?
                continue;
            }
            if (item.startsWith('_CT??')) { // ?
                continue;
            }
            if (item.startsWith('__@@_')) { // ?
                continue;
            }
            if (item.startsWith('\x7f')) { // ?
                continue;
            }
            if (/^_CTA[0-9]\?/.test(item)) { // ?
                continue;
            }
            if (/^_TI[0-9]\?/.test(item)) { // ?
                continue;
            }
            if (item.startsWith('_TI5?')) { // ?
                continue;
            }
            if (item.startsWith("TSS0<`template-parameter-2',")) { // ?
                continue;
            }
            if (/^__real@[0-9a-z]+$/.test(item)) { // constant values
                continue;
            }
            if (/^__xmm@[0-9a-z]+$/.test(item)) { // constant values
                continue;
            }
            if (/^__sse2_sinf4@@[0-9a-z]+$/.test(item)) { // constant values
                continue;
            }
            if (/^__sse4_sinf4@@[0-9a-z]+$/.test(item)) { // constant values
                continue;
            }
            const undeco = core_1.pdb.undecorate(item, dbghelp_1.UNDNAME_NAME_ONLY);
            const address = info.address.subptr(dll_1.dll.current);
            filtered.push([address, info.tag, info.flags, undeco]);
        }
    });
    core_1.pdb.setOptions(old);
    const intv = new Int32Array(3);
    const NULL = Buffer.alloc(1);
    NULL[0] = 0;
    intv[0] = VERSION;
    intv[1] = filtered.length;
    fs.writeSync(fd, intv.subarray(0, 2));
    for (const [address, tag, flags, name] of filtered) {
        intv[0] = address;
        intv[1] = tag;
        intv[2] = flags;
        fs.writeSync(fd, intv);
        fs.writeSync(fd, name);
        fs.writeSync(fd, NULL);
    }
    fs.closeSync(fd);
    const rfd = fs.openSync(cachepath, 'r');
    fs.readSync(rfd, intv, 0, 4, null);
    return rfd;
}
const BUFFER_SIZE = 1024 * 16;
class PdbCache {
    constructor() {
        this.buffer = Buffer.alloc(BUFFER_SIZE);
        this.offset = 0;
        this.bufsize = 0;
        this.fd = makePdbCache();
        this.total = this._readInt();
    }
    close() {
        fs.closeSync(this.fd);
    }
    _readMore() {
        const remained = this.bufsize - this.offset;
        this.buffer.set(this.buffer.subarray(this.offset));
        this.bufsize = fs.readSync(this.fd, this.buffer, remained, BUFFER_SIZE - remained, null) + remained;
        this.offset = 0;
    }
    _readInt() {
        if (this.bufsize - this.offset < 4)
            this._readMore();
        const n = this.buffer.readInt32LE(this.offset);
        this.offset += 4;
        return n;
    }
    _readString() {
        let nullend = this.buffer.indexOf(0, this.offset);
        if (nullend === -1) {
            this._readMore();
            nullend = this.buffer.indexOf(0, this.offset);
            if (nullend === -1)
                throw Error(`Null character not found`);
        }
        const str = this.buffer.subarray(this.offset, nullend).toString('utf8');
        this.offset = nullend + 1;
        return str;
    }
    *[Symbol.iterator]() {
        for (;;) {
            const address = this._readInt();
            const tag = this._readInt();
            const flags = this._readInt();
            const name = this._readString();
            yield { address, tag, flags, name };
        }
    }
}
exports.PdbCache = PdbCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRiY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwZGJjYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw2QkFBOEI7QUFDOUIseUJBQTBCO0FBQzFCLGtDQUE4QjtBQUM5QixnQ0FBNkI7QUFDN0Isd0NBQXNGO0FBRXRGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDM0QsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWxCLFNBQVMsWUFBWTtJQUNqQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDMUIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTztZQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7SUFDRCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxNQUFNLFFBQVEsR0FBc0MsRUFBRSxDQUFDO0lBQ3ZELE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLFVBQUcsQ0FBQyxVQUFVLENBQUMsNkJBQW1CLENBQUMsQ0FBQztJQUNoRCxVQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQSxFQUFFO1FBQ2xCLEtBQUssTUFBTSxJQUFJLElBQUksT0FBTyxFQUFFO1lBQ3hC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