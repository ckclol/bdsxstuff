"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dllchecker = void 0;
const dll_1 = require("bdsx/dll");
const nativetype_1 = require("bdsx/nativetype");
const windows_h_1 = require("bdsx/windows_h");
const colors = require("colors");
function IMAGE_FIRST_SECTION(ntheader) {
    return ntheader.addAs(windows_h_1.IMAGE_SECTION_HEADER, windows_h_1.IMAGE_NT_HEADERS64.offsetOf('OptionalHeader') + ntheader.FileHeader.SizeOfOptionalHeader);
}
const LOAD_LIBRARY_AS_DATAFILE = 0x00000002;
var DepsError;
(function (DepsError) {
    DepsError[DepsError["NotFound"] = 0] = "NotFound";
    DepsError[DepsError["InvalidDosSignature"] = 1] = "InvalidDosSignature";
    DepsError[DepsError["InvalidNtSignature"] = 2] = "InvalidNtSignature";
    DepsError[DepsError["InvalidTooSmall"] = 3] = "InvalidTooSmall";
})(DepsError || (DepsError = {}));
function stringToSignature(str) {
    let sig = 0;
    let shift = 0;
    for (let i = 0; i < str.length; i++) {
        sig |= str.charCodeAt(i) << shift;
        shift += 8;
    }
    return sig;
}
const SIGNATURE_MZ = stringToSignature('MZ');
const SIGNATURE_PE = stringToSignature('PE');
class DllWalker {
    constructor(errorOnly) {
        this.errorOnly = errorOnly;
        this.tested = new Set();
    }
    getDeps(filename) {
        if (filename.startsWith("api-ms-win-"))
            return null;
        if (this.tested.has(filename))
            return null;
        this.tested.add(filename);
        const module = dll_1.dll.kernel32.LoadLibraryExW(filename, null, LOAD_LIBRARY_AS_DATAFILE);
        if (module.isNull()) {
            return DepsError.NotFound;
        }
        if ((module.getAddressLow() & 1) === 0) {
            return this.errorOnly ? null : {}; // already loaded
        }
        try {
            for (;;) {
                const dos = module.subAs(windows_h_1.IMAGE_DOS_HEADER, 1);
                if (dos.e_magic !== SIGNATURE_MZ) {
                    return DepsError.InvalidDosSignature;
                }
                const nt = dos.addAs(windows_h_1.IMAGE_NT_HEADERS64, dos.e_lfanew);
                if (nt.Signature !== SIGNATURE_PE) {
                    return DepsError.InvalidNtSignature;
                }
                if (nt.OptionalHeader.NumberOfRvaAndSizes < 2)
                    break;
                const importdesc_vaddr = nt.OptionalHeader.DataDirectory[1].VirtualAddress;
                if (importdesc_vaddr === 0)
                    break;
                let obj = null;
                let count = 0;
                {
                    const sectionCount = nt.FileHeader.NumberOfSections;
                    let section = IMAGE_FIRST_SECTION(nt);
                    for (let i = 0; i < sectionCount; i++) {
                        if ((section.VirtualAddress <= importdesc_vaddr) && (importdesc_vaddr < section.VirtualAddress + section.SizeOfRawData)) {
                            const off = section.PointerToRawData - section.VirtualAddress;
                            let importdesc = dos.addAs(windows_h_1.IMAGE_IMPORT_DESCRIPTOR, importdesc_vaddr + off);
                            for (;;) {
                                if (importdesc.Name === 0 &&
                                    importdesc.Characteristics === 0 &&
                                    importdesc.FirstThunk === 0 &&
                                    importdesc.ForwarderChain === 0 &&
                                    importdesc.OriginalFirstThunk === 0 &&
                                    importdesc.TimeDateStamp === 0) {
                                    break;
                                }
                                const name = dos.add(importdesc.Name + off).getString();
                                const child = this.getDeps(name);
                                if (child !== null) {
                                    if (obj === null)
                                        obj = {};
                                    obj[name] = child;
                                    count++;
                                }
                                importdesc = importdesc.addAs(windows_h_1.IMAGE_IMPORT_DESCRIPTOR, windows_h_1.IMAGE_IMPORT_DESCRIPTOR[nativetype_1.NativeType.size]);
                            }
                            break;
                        }
                        section = section.addAs(windows_h_1.IMAGE_SECTION_HEADER, windows_h_1.IMAGE_SECTION_HEADER[nativetype_1.NativeType.size]);
                    }
                }
                if (count === 0)
                    break;
                return obj;
            }
            return this.errorOnly ? null : {};
        }
        finally {
            dll_1.dll.kernel32.FreeLibrary(module);
        }
    }
}
var dllchecker;
(function (dllchecker) {
    const messages = {
        [DepsError.NotFound]: 'not found',
        [DepsError.InvalidDosSignature]: 'Invalid DLL, DOS signature does not match',
        [DepsError.InvalidNtSignature]: 'Invalid DLL, NT signature does not match',
        [DepsError.InvalidTooSmall]: 'Invalid DLL, File size is too small',
    };
    function getDependency(filename, errorOnly) {
        const walker = new DllWalker(errorOnly);
        return walker.getDeps(filename);
    }
    dllchecker.getDependency = getDependency;
    function check(path) {
        const err = getDependency(path, true);
        if (typeof err === 'number') {
            console.error(`${colors.red(path)}: ${colors.red(messages[err] || 'ERR#' + err)}`);
            return;
        }
        if (err === null) {
            console.error(`${path}: No problem`);
            return;
        }
        console.error(`${path}`);
        dump(err);
    }
    dllchecker.check = check;
    function dump(deps, indent = '') {
        const entires = Object.entries(deps);
        const last = entires.length - 1;
        for (let i = 0; i < entires.length; i++) {
            const [dllname, err] = entires[i];
            const branch = i === last ? '└' : '├';
            if (typeof err === 'number') {
                console.error(`${indent}${branch} ${colors.red(dllname)}: ${colors.red(messages[err] || 'ERR#' + err)}`);
            }
            else {
                console.error(`${indent}${branch} ${dllname}`);
                dump(err, indent + (i === last ? '　' : '│'));
            }
        }
    }
    dllchecker.dump = dump;
})(dllchecker = exports.dllchecker || (exports.dllchecker = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGxsY2hlY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRsbGNoZWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esa0NBQStCO0FBQy9CLGdEQUE2QztBQUM3Qyw4Q0FBcUg7QUFDckgsaUNBQWtDO0FBRWxDLFNBQVMsbUJBQW1CLENBQUMsUUFBMkI7SUFDcEQsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLGdDQUFvQixFQUFFLDhCQUFrQixDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUMxSSxDQUFDO0FBRUQsTUFBTSx3QkFBd0IsR0FBRyxVQUFVLENBQUM7QUFFNUMsSUFBSyxTQU1KO0FBTkQsV0FBSyxTQUFTO0lBRVYsaURBQVEsQ0FBQTtJQUNSLHVFQUFtQixDQUFBO0lBQ25CLHFFQUFrQixDQUFBO0lBQ2xCLCtEQUFlLENBQUE7QUFDbkIsQ0FBQyxFQU5JLFNBQVMsS0FBVCxTQUFTLFFBTWI7QUFFRCxTQUFTLGlCQUFpQixDQUFDLEdBQVU7SUFDakMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsS0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDM0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO1FBQ2xDLEtBQUssSUFBSSxDQUFDLENBQUM7S0FDZDtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdDLE1BQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBTzdDLE1BQU0sU0FBUztJQUdYLFlBQW9CLFNBQWlC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