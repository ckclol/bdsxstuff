"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findDll = void 0;
const path = require("path");
const bdsx_1 = require("bdsx");
const dll_1 = require("bdsx/dll");
const util_1 = require("bdsx/util");
const windows_h_1 = require("bdsx/windows_h");
const GetDllDirectoryW = dll_1.dll.kernel32.module.getFunction('GetDllDirectoryW', bdsx_1.RawTypeId.Int32, null, bdsx_1.RawTypeId.Int32, bdsx_1.RawTypeId.Buffer);
const GetSystemDirectoryW = dll_1.dll.kernel32.module.getFunction('GetSystemDirectoryW', bdsx_1.RawTypeId.Int32, null, bdsx_1.RawTypeId.Buffer, bdsx_1.RawTypeId.Int32);
const GetWindowsDirectoryW = dll_1.dll.kernel32.module.getFunction('GetWindowsDirectoryW', bdsx_1.RawTypeId.Int32, null, bdsx_1.RawTypeId.Buffer, bdsx_1.RawTypeId.Int32);
function winapiToString(fn) {
    const buf = Buffer.alloc(windows_h_1.MAX_PATH);
    const size = fn(buf, windows_h_1.MAX_PATH);
    return buf.slice(0, size).toString('utf16le');
}
function winapiToString2(fn) {
    const buf = Buffer.alloc(windows_h_1.MAX_PATH);
    const size = fn(windows_h_1.MAX_PATH, buf);
    return buf.slice(0, size).toString('utf16le');
}
function findDll(filename) {
    // search exe path
    {
        const exePath = process.argv[0];
        const dllpath = path.join(path.dirname(exePath), filename);
        if (util_1.isFile(dllpath))
            return dllpath;
    }
    // search dll path
    {
        const dlldir = winapiToString2(GetDllDirectoryW);
        const dllpath = path.join(dlldir, filename);
        if (util_1.isFile(dllpath))
            return dllpath;
    }
    // search system directory
    {
        const systemdir = winapiToString(GetSystemDirectoryW);
        const dllpath = path.join(systemdir, filename);
        if (util_1.isFile(dllpath))
            return dllpath;
    }
    // search windows directory
    {
        const windir = winapiToString(GetWindowsDirectoryW);
        const dllpath = path.join(windir, filename);
        if (util_1.isFile(dllpath))
            return dllpath;
    }
    // search pathes
    {
        const pathes = process.env.PATH || '';
        for (const dirname of pathes.split(';')) {
            const dllpath = path.join(dirname, filename);
            if (util_1.isFile(dllpath))
                return dllpath;
        }
    }
    return null;
}
exports.findDll = findDll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZGRsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbmRkbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkJBQThCO0FBQzlCLCtCQUFpQztBQUNqQyxrQ0FBK0I7QUFDL0Isb0NBQW1DO0FBQ25DLDhDQUEwQztBQUUxQyxNQUFNLGdCQUFnQixHQUFHLFNBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxnQkFBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsZ0JBQVMsQ0FBQyxLQUFLLEVBQUUsZ0JBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2SSxNQUFNLG1CQUFtQixHQUFHLFNBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxnQkFBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsZ0JBQVMsQ0FBQyxNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3SSxNQUFNLG9CQUFvQixHQUFHLFNBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsRUFBRSxnQkFBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsZ0JBQVMsQ0FBQyxNQUFNLEVBQUUsZ0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUUvSSxTQUFTLGNBQWMsQ0FBQyxFQUEwQztJQUM5RCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFRLENBQUMsQ0FBQztJQUNuQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLG9CQUFRLENBQUMsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsRUFBMEM7SUFDL0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxvQkFBUSxDQUFDLENBQUM7SUFDbkMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLG9CQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUdELFNBQWdCLE9BQU8sQ0FBQyxRQUFlO0lBQ25DLGtCQUFrQjtJQUNsQjtRQUNJLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBTSxDQUFDLE9BQU8sQ0FBQztZQUFFLE9BQU8sT0FBTyxDQUFDO0tBQ3ZDO0lBRUQsa0JBQWtCO0lBQ2xCO1FBQ0ksTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDakQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDNUMsSUFBSSxhQUFNLENBQUMsT0FBTyxDQUFDO1lBQUUsT0FBTyxPQUFPLENBQUM7S0FDdkM7SUFFRCwwQkFBMEI7SUFDMUI7UUFDSSxNQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvQyxJQUFJLGFBQU0sQ0FBQyxPQUFPLENBQUM7WUFBRSxPQUFPLE9BQU8sQ0FBQztLQUN2QztJQUVELDJCQUEyQjtJQUMzQjtRQUNJLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLElBQUksYUFBTSxDQUFDLE9BQU8sQ0FBQztZQUFFLE9BQU8sT0FBTyxDQUFDO0tBQ3ZDO0lBRUQsZ0JBQWdCO0lBQ2hCO1FBQ0ksTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3RDLEtBQUssTUFBTSxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNyQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM3QyxJQUFJLGFBQU0sQ0FBQyxPQUFPLENBQUM7Z0JBQUUsT0FBTyxPQUFPLENBQUM7U0FDdkM7S0FDSjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUF0Q0QsMEJBc0NDIn0=