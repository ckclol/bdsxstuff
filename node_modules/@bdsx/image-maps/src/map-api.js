"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapApi = void 0;
const color_1 = require("./color");
const map_item_1 = require("./map-item");
const index_1 = require("./index");
const Jimp = require("jimp");
class MapApi {
    //public static createMap() {}
    static async getImageData(imgPath) {
        let colors = [];
        try {
            const image = await Jimp.read(imgPath);
            image.resize(128, Jimp.AUTO);
            for (let y = 0; y < 128; y++) {
                colors[y] = [];
                for (let x = 0; x < 128; x++) {
                    let pix = Jimp.intToRGBA(image.getPixelColor(x, y));
                    colors[y][x] = new color_1.Color(pix.r, pix.g, pix.b, pix.a);
                }
            }
        }
        catch (exception) {
            console.log(exception);
        }
        return colors;
    }
    static setMapPixels(itemStack, colors, save = true) {
        let mapData = map_item_1.MapItem.getMapData(itemStack);
        for (let y = 0; y < colors[0].length; ++y) {
            for (let x = 0; x < colors[1].length; ++x) {
                let color = colors[y][x].toABGR();
                mapData.setPixel(color, x, y);
            }
        }
        mapData.setLocked();
        if (save)
            mapData.save(index_1.getLevelStorage());
        mapData.destruct();
    }
    /**
     * @param itemStack - Map item
     * @param image - URL or path to image
     * @param save
     */
    static async setMapImage(itemStack, image, save = true) {
        let imageData = await this.getImageData(image);
        this.setMapPixels(itemStack, imageData, save);
    }
}
exports.MapApi = MapApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1hcC1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQWdDO0FBQ2hDLHlDQUFxQztBQUVyQyxtQ0FBMEM7QUFFMUMsNkJBQThCO0FBRTlCLE1BQWEsTUFBTTtJQUVmLDhCQUE4QjtJQUV2QixNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFlO1FBQzVDLElBQUksTUFBTSxHQUFjLEVBQUUsQ0FBQztRQUMzQixJQUFJO1lBQ0EsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQzFCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksYUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDeEQ7YUFDSjtTQUNKO1FBQUMsT0FBTyxTQUFTLEVBQUU7WUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQW9CLEVBQUUsTUFBaUIsRUFBRSxPQUFnQixJQUFJO1FBQ3BGLElBQUksT0FBTyxHQUFHLGtCQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3RDLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFDO2dCQUNyQyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNqQztTQUNKO1FBQ0QsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3BCLElBQUcsSUFBSTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQWUsRUFBRSxDQUFDLENBQUM7UUFDekMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBb0IsRUFBRSxLQUFhLEVBQUUsT0FBZ0IsSUFBSTtRQUNyRixJQUFJLFNBQVMsR0FBYyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FDSjtBQTVDRCx3QkE0Q0MifQ==