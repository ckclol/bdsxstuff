"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventEx = exports.Event = void 0;
require("@mcbe/dummy-console");
class Event {
    constructor() {
        this.listeners = [];
    }
    isEmpty() {
        return this.listeners.length === 0;
    }
    /**
     * cancel event if it returns non-undefined value
     */
    on(listener) {
        this.listeners.push(listener);
    }
    onFirst(listener) {
        this.listeners.unshift(listener);
    }
    onLast(listener) {
        this.listeners.push(listener);
    }
    onBefore(listener, needle) {
        const idx = this.listeners.indexOf(needle);
        if (idx === -1)
            throw Error('needle not found');
        this.listeners.splice(idx, 0, listener);
    }
    onAfter(listener, needle) {
        const idx = this.listeners.indexOf(needle);
        if (idx === -1)
            throw Error('needle not found');
        this.listeners.splice(idx + 1, 0, listener);
    }
    remove(listener) {
        const idx = this.listeners.indexOf(listener);
        if (idx === -1)
            return false;
        this.listeners.splice(idx, 1);
        return true;
    }
    /**
     * return value if it canceled
     */
    fire(...v) {
        for (const listener of this.listeners) {
            try {
                const ret = listener(...v);
                if (ret !== undefined)
                    return ret;
            }
            catch (err) {
                console.error(err);
            }
        }
        return undefined;
    }
    /**
     * reverse listener orders
     * return value if it canceled
     */
    fireReverse(...v) {
        for (const listener of this.listeners) {
            try {
                const ret = listener(...v);
                if (ret !== undefined)
                    return ret;
            }
            catch (err) {
                console.error(err);
            }
        }
        return undefined;
    }
    allListeners() {
        return this.listeners.values();
    }
    /**
     * remove all listeners
     */
    clear() {
        this.listeners.length = 0;
    }
}
exports.Event = Event;
class EventEx extends Event {
    onStarted() { }
    onCleared() { }
    on(listener) {
        if (this.isEmpty())
            this.onStarted();
        super.on(listener);
    }
    remove(listener) {
        if (!this.remove(listener))
            return false;
        if (this.isEmpty())
            this.onCleared();
        return true;
    }
}
exports.EventEx = EventEx;
exports.default = Event;
//# sourceMappingURL=index.js.map